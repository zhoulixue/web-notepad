module CommQueue{

	/*
	测试L5:
	IP:10.49.123.228:23579
	L5:599873:4718592

	正式L5:
	L5:
	*/

    enum CMD
    {
        INSERT_QUEUE =	0xf8be,                        //插入通用队列系统
        MODIFY_SOURCE = 0xf8bf,                       //设置通用队列资源
        CHECK_NODE = 0xf8c0,                           //检查节点执行结果
        DELETE_NODE = 0xf8c1,                          //从通用队列中删除指定节点
        PUSH_NODE = 0xf8c5,                             //通用队列发出的节点请求
    };
    
    enum RT_CODE                                            //请求状态
    {
        RT_OK = 0,
    };
    
    enum NODE_STATUS                                   //节点状态
    {
        STATUS_INIT = 0,                              
        STATUS_FINISH = 1,                          //完成
        STATUS_QUEUING = 2,                      //排队中
        STATUS_FULL = 3,                             //队列已满
		STATUS_DESERT = 4,                        //节点已过期，执行情况未知
		STATUS_SRC_LACK = 5,                    //资源不足
		STATUS_UNKNOWN = 6,                	//底层错误，执行情况未知
    };
    
    struct STNodeTag                                                    //节点标签结构
    {
        0 require string strNodeKey;                               //节点Key
        1 require long ddwSeqNum;                                //排第几
        2 optional int dwNodeStatus;                               //节点状态
		3 optional string strResult;                           //执行返回的结果映射Key
    };
    
    struct STSourceInfo                                                //资源信息结构
    {
        0 require string strSourceId;                                //资源ID
        1 require long ddwSourceNum;                            //资源数
    };
    
    struct STNodeData                                                   //节点信息结构
    {
        0 require string strNodeMsg;                                //队列透传给后端的数据，业务自定
        1 optional vector<STSourceInfo> vecSrc;             //可选需要消耗的资源列表
    };
    
    
    struct STQueueUpReq
    {
        0 require string strAppId;                                    //请求的业务ID
        1 require STNodeData stNodeData;                        //节点信息
        2 optional string strNodeKey;                               //节点标签
		3 optional int iRouteCount;                                   //路由计数（路由用，业务置0）
    };
    
    struct STQueueUpRsp
    {
        0 require int iErrCode;
        1 require string strErrMsg;
        2 optional STNodeTag stNodeTag;                         //返回的节点状态
    };
    
    struct STCheckQueueReq
    {
        0 require string strAppId;                                    //请求的业务ID
        1 optional string strNodeKey;                               //节点标签
		2 optional int iRouteCount;                                   //路由计数（路由用，业务置0）
    };
    
    struct STCheckQueueRsp
    {
        0 require int iErrCode;
        1 require string strErrMsg;
        2 optional STNodeTag stNodeTag;                         //返回的节点状态
		3 optional int iPollGap;                                //下发轮询间隔
    };
    
    struct STModifySourceInfoReq                                //设置业务资源信息
    {
        0 require string strAppId;                                   //设置的业务ID
        1 require vector<STSourceInfo> vecSrc; 			             //设置的资源数
	};

    struct STModifySourceInfoRsp
    {
        0 require int iErrCode;
        1 require string strErrMsg;
    };
    
    struct STDeleteNodeReq
    {
        0 require string strAppId;                                   //请求的业务ID
        1 require string strNodeKey;                        //删除的节点
		2 optional int iRouteCount;                                   //路由计数（路由用，业务置0）
    };
    
    struct STDeleteNodeRsp
    {
        0 require int iErrCode;                                       
        1 require string strErrMsg;                                 
    };
    
    struct STPushNodeReq                                            //节点推送请求
    {
        0 require string strAppId;                                    //请求的业务ID
        1 require STNodeData stNodeData;                      //请求参数
    };
    
    struct STPushNodeRsp
    {
        0 require int iErrCode;
        1 require string strErrMsg;
		2 optional string strResult;                           //执行返回的结果映射Key
    };
    
};
