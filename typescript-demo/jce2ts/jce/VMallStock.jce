#include "VideoMallComm.jce"

module VMallStock
{
	/*
	    测试环境： 10.49.107.200:24459 913345:589824
		正式环境： 913345:655360
	*/
	enum emSubCmd
	{
		CMD_READ_STOCK_LIST = 0xf675,       // 读进货批次(以下简称批次)列表
		CMD_READ_STOCK_INFO = 0xf676,       // 读批次详情
		CMD_WRITE_STOCK = 0xf677,           // 写批次
		                                    // 0xf3ea, 0xf35a接中转修改批次

		CMD_READ_PROD_STORE_INFO = 0xf88f,  // 读商品的仓储信息            
		CMD_READ_LOCK_SKU_LIST = 0xf808,    // 读锁定SKU列表
		CMD_READ_LOCK_SKU_INFO = 0xf8e8,    // 读锁定详情 
		CMD_LOCK_SKU = 0xf809,              // 锁定SKU
		CMD_RELEASE_SKU = 0xf80b,           // 核销SKU

		CMD_RELEASE_SKU_BATCH = 0xf909,     // 批量核销

		CMD_CONSUME_SKU = 0xf80a,           // 消耗锁定SKU
	};
	enum emErrCode
	{
		RT_QUERY_READ_ERROR = 2001,             // 读DB失败
		RT_QUERY_WRITE_ERROR = 2002,            // 写DB失败
		RT_GET_STORE_NAME_ERROR = 2003,         // 获取仓库名失败
		RT_WRITE_SKU_ERROR = 2004,              // 写SKU失败
		RT_CHECK_USER_RIGHT_ERROR = 2005,       // 鉴权失败
		RT_STORE_HAS_NO_STOCK_ERROR = 2006,     // 仓储无批次
		RT_GET_PROD_SKU_ERROR = 2007,           // 获取商品SKU列表失败
		RT_GET_SKU_INFO_ERROR = 2008,           // 获取SKU信息失败
		RT_SKU_NOT_ENOUGH_ERROR = 2009,         // SKU数量不够(锁定) 
		RT_READ_ORDER_FLOW_ERROR = 2010,        // 读订单状态失败
		RT_GOODS_NUM_INVALID = 2011,            // 订单中SKU数量不合法
		RT_CHECK_INVALID = 2012,                // 检查错误
	}; 
	enum emStatus
	{
		S_EDITING = 1,          // 编辑中
		S_IN_USE = 2,           // 使用中
		S_EXHAUSTED = 3,        // 已耗尽
	};
	enum emStockType
	{
		ST_NORMAL = 1,              // 正常销售
		ST_SEC_KILL = 2,            // 秒杀
	};
	struct STSkuInfo
	{
		1 require string strSkuId;
		2 require unsigned int dwSupplyPrice;         // 供货价
		3 require unsigned int dwInboundNum;          // 入库库存
		4 require unsigned int dwConsumedNum;         // 已耗库存
	};
	struct STSkuStockInfo
	{
		1 require long ddwStockId;                     // 批次ID
		2 optional string strStockName;                // 批次名
		3 require int iStatus;                         // 状态，取自emStatus
		4 require unsigned int dwSupplyPrice;          // 供货价(单位：分)
		5 require unsigned int dwLeftNum;              // 剩余库存
	};
	struct STStoreSkuInfo
	{
		1 require string strSkuId;
		2 optional vector<VideoMall::STPropInfo> vecProps;		//SKU所包含的属性信息
		3 optional vector<STSkuStockInfo> vecSkuStockInfo;
	};
	struct STStoreInfo
	{
		1 require string strStoreId;
		2 optional string strStoreName;
		3 optional unsigned int dwSkuNum;
		4 optional vector<STStoreSkuInfo> vecStoreSkuInfo;
	};
	struct STStockInfo
	{
		1 require long ddwStockId;                   // 批次ID
		2 optional string strStockName;              // 批次名
		3 require int iStartTime;                    // 开始使用时间
		4 require int iStatus;                       // 状态，取自emStatus
		5 require unsigned int dwTotSkuSp;           // SKU种类
		6 require unsigned int dwTotSkuNum;          // 全部SKU数量
		7 require unsigned int dwTotCost;            // 总金额：全部SKU的数量 * SKU供货价
		8 require STStoreInfo stStoreInfo;           // 仓库信息
		9 optional string strRemark;                 // 备注
		10 require vector<STSkuInfo> vecSkuInfo;     // SKU信息
	};
	enum emQueryType
	{
		QT_STOCK_ID = 1,           // 批次ID
		QT_STOCK_NAME = 2,         // 批次名
		QT_STATUS = 3,             // 批次状态
		QT_SELLER_ID = 4,          // 仓库ID
		QT_SKU_ID = 5,             // SKUID
	};
	struct STQueryInfo
	{
		1 require int iType;
		2 require string strValue;
	};
	struct STReadStockListReq
	{
		1 require int iSeqNum;     // 按页码分页
		2 require int iCurPage;
		3 optional vector<STQueryInfo> vecQueryInfo;
	};
	struct STReadStockListRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 optional vector<STStockInfo> vecStockInfo;      // stSkuInfo为空
		4 require int iTotPage;    // 总页数
	}; 
	struct STReadStockInfoReq
	{
		1 require long ddwStockId;
	};
	struct STReadStockInfoRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 optional STStockInfo stStockInfo;     // stSkuInfo非空
	}; 
	struct STWriteStockReq
	{
		1 require int iType;        // =1:新增 =2：修改 =3：删除
		2 require STStockInfo stStockInfo;
		3 optional int iModType;    // =1:修改基本信息 =2：修改SKU详情
	};
	struct STWriteStockRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 optional long ddwStockId;     // 新增时返回
		4 optional int iStartTime;      // 返回的开始使用时间
	};
	enum emLockType
	{
		LT_ONE_STORE = 1,              // 同一个仓储
		LT_MULTI_STORE = 2,            // 多个仓储
	};
	struct STLockSkuInfo
	{
		1 require long ddwLockId;
		2 optional string strLockName;
		3 require string strSkuId;
		4 require STStoreInfo stStoreInfo;
		5 require unsigned int dwLockNum;                   // 锁定数量
		6 require int iLockTime;
		7 optional vector<VideoMall::STPropInfo> vecProps;
		8 optional unsigned int dwReleaseNum;               // 核销数量
		9 optional bool bRls;                               // =0:未被核销 =1:已核销 
		10 optional int iLockType;                          // 锁定类型，取自emLockType
		11 optional vector<STStoreInfo> vecStoreInfo;       // tag4无法表示锁多仓的情况
		12 optional unsigned int dwConsNum;                 // 已耗数量
	};
	struct STReadLockSkuListReq
	{
		1 require int iPageFlag;            // 翻页规则 =1:页码翻页 =2:上下文翻页
		2 require int iSeqNum;              // 2,3用于页码翻页
		3 optional int iCurPage;            // 2,4用于上下文翻页
		4 optional string strPageCtx;
		5 optional string strProdId;        // 商品ID
	};
	struct STReadLockSkuListRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 optional vector<STLockSkuInfo> vecLockSkuInfo;
		4 optional int iTotNum;             // 锁库存条数，页码翻页时返回
		5 optional string strPageCtx;       // 5,6上下文翻页时返回
		6 optional bool bHasNext;
		7 optional unsigned int dwTotNum;   // 总锁定数
	};
	struct STLockSkuReq
	{
		1 require string strLockName;
		2 require string strStoreId;
		3 require string strSkuId;
		4 require unsigned int dwLockNum;
		5 optional int iLockType = 1;          // 锁定类型，取自emLockType
	};
	struct STLockSkuRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 require long ddwLockId;
	};
	struct STConsumeSkuReq
	{
		1 require long ddwLockId;
		2 require unsigned int dwConsumedNum;
	};
	struct STConsumeSkuRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
	};
	struct STReleaseSkuReq
	{
		1 require long ddwLockId;
		2 require string strSkuId;
		3 require unsigned int dwReleaseNum;
	};
	struct STReleaseSkuRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
	};
	struct STReadProdStoreInfoReq
	{
		1 require string strProdId;
	};
	struct STReadProdStoreInfoRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 optional vector<STStoreInfo> vecStoreInfo; 
		4 optional unsigned int dwTotNum;
	};
	struct STReadLockSkuInfoReq
	{
		1 require vector<long> vecLockId;
	};
	struct STReadLockSkuInfoRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 optional map<long, STLockSkuInfo> mapLockId2Info;
	};
};
