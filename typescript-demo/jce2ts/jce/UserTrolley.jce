#include "VideoMallComm.jce"

/*
    测试环境：10.49.107.200:5574
	          913345:65536
	正式环境：10.223.13.76:5574
	          913345:65537
*/
module VMallUser
{
	// 包命令类型
    enum emUserPackgeType
	{
		// 购物车相关
        EM_ADD_TROLLEY_REQ = 0xf256,              // 新增购物车
		EM_DEL_TROLLEY_REQ = 0xf257,              // 删除购物车
		EM_GET_TROLLEY_REQ = 0xf258,              // 查询购物车
		EM_MOD_TROLLEY_REQ = 0xf259,              // 修改购物车
		EM_GET_TROLLEY_NUM_REQ = 0xf44c,          // 获取购物车数量

        EM_CHOSEN_TROLLEY_REQ = 0xf35f,           // 选中与取消选中购物车

        // 收藏相关
		ISCOLL_REQ = 0xf25a,
		ADDCOLL_REQ = 0xf25b,
		DELCOLL_REQ = 0xf25c,
		GETCOLL_REQ = 0xf25d
	};

    enum emErrCode
	{
		RT_GET_SELLER_ERROR = 2003,           // 获取商家失败
		RT_GET_SELLER_SKU_ERROR = 2004,       // 获取商家下SKU失败
		RT_GET_SKU_INFO_ERROR = 2005,         // 获取SKU信息失败
		RT_GET_PROD_INFO_ERROR = 2006,        // 获取商品信息失败
		RT_GET_SKU_LOCAL_ERROR = 2007,        // 获取SKU本地信息失败
		RT_GET_SKU_ERROR = 2008,              // 获取购物车SKUID失败 
		
	};

	// 特权类型 
	enum emPrivilegeType
	{
		EM_NONE_PRIVILEGE_TYPE = 0,                     // 未选择特权
		EM_VIP_PRIVILEGE_TYPE = 1,                      // VIP会员
		EM_DIKI_PRIVELEGE_TYPE = 2,                     // doki特权
		EM_IWAN_PRIVILEGE_TYPE = 3,                     // 爱玩特权
	};

    // 购物车本地信息
	struct STTrolleySkuLocal
	{
		1 require string strSkuId;                               // 库存ID
		2 require unsigned int uiSkuNum;                         // 数量
		3 require emPrivilegeType ePrivilegeType;                // 所选特权类型 
        4 require string strCreateTime;                          // 创建（最新添加）时间
		5 require bool bChosen;                                  // 是否选中
		6 optional string strChannelId;                          // 渠道ID
	};

	// 库存价格的V币抵扣
	struct STVBDiscount
	{
		1 require long ulVBNum;                      // V币数量
		2 require long ulRMBNum;                     // 抵扣多少元
	};

	// 购物车的商品信息
	struct STTrolleyProduct
	{
		1 require string strProductId;                                    // 商品ID
		2 require string strProductName;                                  // 商品名
		3 require string strCategoryId;                                   // 商品类别
		4 require string strSellerId;                                     // 商家ID
		5 require unsigned int uiPostage;                                 // 邮费
		6 require vector<VideoMall::STProductSkuInfo> vecProductSkuInfo;  // SKU列表
		7 require vector<int> vecPrivilegeType;                           // 优惠列表
		8 require bool bValid;                                            // 是否失效
		9 require int iAllQuantity;                                       // 总库存 
		10 require vector<string> vecImgUrls;                             // 图片集
		11 optional vector<VideoMall::STPriceTag> vecRealPriceTag;		  //最终价格标签
	};

	// 购物车的商家信息
	struct STTrolleySeller
	{
		1 require string strSellerId;                // 商家ID
		2 require string strSellerName;              // 商家名
		3 optional unsigned int uiPostFree;          // 满多少包邮
	};

	// 购物车单元(单SKU)
    struct STTrolleyUnit
	{
		1 require STTrolleySkuLocal stTrolleySkuLocal;
		2 require VideoMall::STProductSkuInfo stProductSkuInfo;
		3 require STTrolleyProduct stTrolleyProduct;
	};

	// 购物车(单商家)
	struct STTrolley
	{
		1 require STTrolleySeller stTrolleySeller;             // 商家信息
		2 require vector<STTrolleyUnit> vecTrolleyUnit;        // 同一商家的商品数组
	};

	// 新增购物车请求及回应包
	struct STAddTrolleyReq
	{
		1 require STTrolleySkuLocal stTrolleySkuLocal;           // 新增的购物车本地信息
	};

	struct STAddTrolleyRsp
	{
		1 require int iErrCode;
		2 require string strErrMsg;
		3 optional int iTrolleyNum;
	};

	// 删除购物车请求包及回应包
	struct STDelTrolleyReq
	{
		1 require vector<string> vecSkuId;           // 删除的库存ID列表
	    2 optional string strChannleId;              // 渠道ID
	};

	struct STDelTrolleyRsp
	{
		1 require int iErrCode;
		2 require string strErrMsg;
	};

	// 查询购物车请求及回应包
	struct STGetTrolleyReq
	{
        1 require int iType;                                 // 1:显示全部；2：翻页
		2 require int iReqNum;                               // 一页显示多少
		3 optional string strPageContext;                    // 上下文，例如: last_seller_index=2
	    4 optional string strChannleId;              // 渠道ID
	};

	struct STGetTrolleyRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 require vector<STTrolley> vecTrolley;            // 返回的购物车信息
		4 require string strPageContext;                   // 上下文
		5 require bool bHasNext;                           // 是否还有下一页
	};

	// 修改购物车请求及回应包
	struct STModTrolleyReq
	{
		1 require string strOldSkuId;
		2 require STTrolleySkuLocal stTrolleySkuLocal;       // 更新后的库存本地信息
	    3 optional string strChannleId;              // 渠道ID
	};

	struct STModTrolleyRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
	};

	// 选中与取消选中请求及回应包
	struct STChosenTrolleyReq
	{
		1 require string strSkuId;                // 库存ID
	};

	struct STChosenTrolleyRsp
	{
		1 require int iErrCode;
		2 require string strErrMsg;
	};

	// 获取购物车数量请求和回应包
	struct STGetTrolleyNumReq
	{
		1 require int iType;              // 1: 全部；2：有效
	    2 optional string strChannleId;              // 渠道ID
	};

	struct STGetTrolleyNumRsp
	{
		1 require int iErrCode;
		2 optional string strErrMsg;
		3 require int iTrolleyNum;
	};
};
