module VideoMall
{
	enum emPayType
	{
		EM_PAY_TYPE_NONE = 0,
		EM_PAY_TYPE_ONLY_CASH = 1, //纯现金支付
		EM_PAY_TYPE_CASH_AND_VCOIN = 2, //现金加v币组合支付
		EM_PAY_TYPE_ONLY_VCOIN = 3, //纯V币支付
		EM_PAY_TYPE_RECOMMEND = 4, //需要推荐的支付
		EM_PAY_TYPE_CASH_AND_PDD_GOLDS = 5,//新增  现金+片多多金币
    EM_PAY_TYPE_ONLY_PDD_GOLDS = 6, // 新增  纯片多多金币支付
	};

    //支付方式
    enum E_PAY_METHOD
    {
        EM_PAY_TOTAL = 0,                                   //全款
        EM_PAY_PREPAY = 1,                                  //预付定金
    };


	enum emPricePrivilege
	{
		EM_PRIVILEGE_VIDEO_VIP = 1, //视频会员
		EM_PRIVILEGE_VMALL_NEW_USER = 2, //新用户
	};

	enum emDiscountType
	{
		EM_DISCOUNT_TYPE_PRIVILEGE = 1, //用户身份特权抵扣
		EM_DISCOUNT_TYPE_ACTIVITY = 2,  //活动抵扣
		EM_DISCOUNT_TYPE_PRESALE = 3, //预售抵扣
	};

	enum emProdPriceType
	{
		EM_PROD_PRICE_TYPE_VIP = 1, //VIP
		EM_PROD_PRICE_TYPE_NEW_USER = 2, //新用户
		EM_PROD_PRICE_TYPE_ACT = 3, //活动
		EM_PROD_PRICE_TYPE_PRESALE = 4, //预售
		EM_PROD_PRICE_TYPE_CHANNEL = 5, //渠道
	};

	//减免方式
	enum emReduceType
	{
		EM_REDUCE_NONE = 0,			//无优惠
		EM_REDUCE_TYPE_ACT = 1,		//活动优惠
		EM_REDUCE_TYPE_COUPON = 2,	//优惠券
	};

	//支付账号类型
	enum emPayUserType
	{
		EM_PAY_USER_TYPE_QQ = 1,	//QQ账号
		EM_PAY_USER_TYPE_WX = 2,	//微信账号openid
		EM_PAY_USER_TYPE_VUID = 3, //视频用户id
	};

	//商品参与的活动类型
	enum emActType
	{
		E_ACTIVITY_SYSTEM = 1,			//系统活动
		E_ACTIVITY_OPERATE = 2,			//运营活动
		E_ACTIVITY_SECKILL = 3, 		//秒杀活动
		E_ACTIVITY_OFFLINE = 4,			//线下活动
	};

	//优惠券无法使用原因
	enum emCouponUnableUseReason
	{
		EM_COUPON_UNUSE_REASON_EXPIRE = 1, //优惠券过期
		EM_COUPON_UNUSE_REASON_PRODUCT_NOT_MATCH = 2, //没有满足使用范围的商品
		EM_COUPON_UNUSE_REASON_BEFORE_START_TIME = 3, //还没到使用起始时间的优惠券ID
		EM_COUPON_UNUSE_REASON_NUM_LIMIT = 4, //商品个数多于使用限制
		EM_COUPON_UNUSE_REASON_TOTAL_PRICE_NOT_MATCH = 5, //未满足金额要求
		EM_COUPON_UNUSE_REASON_TRANS_PRICE_NOT_MATCH = 6, //邮费金额未满足
		EM_COUPON_UNUSE_REASON_CHANNEL_NOT_MATCH = 7, //非本渠道优惠券
		EM_COUPON_UNUSE_REASON_UNKNOW = 100, //未知原因
	};

	enum emPayCreditsType
	{
		EM_PAY_CREDITS_TYPE_VCOIN = 0, //V币
		EM_PAY_CREDITS_TYPE_VSCORE = 1, //积分
	};

	//邮寄信息（用户系统DeliAddr与订单系统STOrderInfo的公共信息）
	struct STPostInfo
	{
		1 require string strConsignee; 				 	// 收货人
		2 require string strPhone; 						// 联系电话
		3 require string strProvince;  					// 省
		4 require string strCity;  						// 市
		5 require string strRegion; 					// 区
		6 require string strAddrDetail; 				// 详细地址
		7 require string strPost; 						// 邮编
		8 optional unsigned int dwAreaId;               // 区域ID
	};

	
	enum emCredictType
	{
		E_DEDUCT_TOTAL = 1,				//全部抵扣
		E_DEDUCT_PARTIAL = 2,			//部分抵扣
	};
	
	//积分抵扣配置信息
	struct STCredictInfo 
	{
		1 optional int iType;				//抵扣类型，对应emCredictType
		2 optional bool bForce = false;		//强制使用
		3 optional unsigned int uiCredict;		//积分
		4 optional unsigned int uiCash;			//现金
	};

	// 片多多金币抵扣商品
	struct STPddGoldsConf
	{
		1 optional int iType;				//抵扣类型，对应emCredictType
		2 optional bool bForce = false;		//强制使用
		3 optional unsigned int uiGolds;		//金币
		4 optional unsigned int uiCash;			//现金
	};

	//==========商品公共协议定义=================
	
	struct STValInfo
	{
		1 optional string strVal;				//属性值
		2 optional string strRemark;			//属性值备注
	};
	
	struct STPropInfo
	{
		1 require string strPropName;			//属性名
		2 require vector<string> vecPropValues;	//属性值
		3 optional vector<STValInfo> vecValInfo;	//属性值加备注
	};
	
	//商品特权抵扣信息
	struct STDiscountInfo
	{
		1 require int iPrivilegeId;					//特权id，参考emPricePrivilege
		2 optional unsigned int uiCash;				//特权对应的现金抵扣
	};
	

	//特权信息
	struct STPrivilegeInfo
	{
		1 require int 	iPrivilegeId;		//特权id，参考emPricePrivilege
		2 require bool	bIsMatch = false;	//是否符合特权
		3 optional unsigned int uiDiscount; //特权抵扣的金额
		4 optional int iLevel;				//特权等级
	};

	struct STActDiscountInfo
	{
		1 require string strActId;			//活动ID
		2 require string strActTitle;		//活动名称
		3 optional unsigned int uiCash;		//活动优惠金额（差价）
		4 optional int iType;				//活动类型
		5 optional unsigned int uiPrice;	//指定的价格，这个有值时uiCach无效
	};
	
	//商品价格标签
	struct STPriceTag
	{
		1 require int iPriceType;			//参考emProdPriceType
		2 optional string strTagName;		//标签名称，如果是活动就是活动名称
		3 optional unsigned int uiDiscount;	//活动、身份价抵扣金额
		4 optional unsigned int uiPrice;	//现金价格
		5 optional int iActType;			//商品活动类型,只有活动价才有，参考emActType
		6 optional string strActId;			//活动ID
		7 optional unsigned int uiCredits;	//积分价
		8 optional unsigned int uiCreditsDiscount; //积分抵扣金额，无则是强制使用积分价
		9 optional unsigned int uiDepositPrice;   //订金价格
		10 optional unsigned int uiRestPrice;     //尾款
		11 optional unsigned int uiPddGolds;  //金币 新增
		12 optional unsigned int uiPddGoldsDiscount; //金币抵扣 新增
	};

	//SKU优惠减免信息
	struct STSkuReduceInfo
	{
		1 require string strSkuId;				//skuid
		2 require unsigned int uiReducePrice;	//优惠金额
		3 require unsigned int uiGoodsNum;		//商品个数
	};

	//优惠方式信息
	struct STPerferential
	{
		1 require int iReduceType;		//参考emReduceType
		2 require string strId;			//优惠的id。如果是促销就是活动id，优惠券就是优惠券id
		3 require vector<STSkuReduceInfo> vecSkuReduce;	//符合条件的商品
		4 optional string strBatId;		//优惠券批次id
		5 optional int iUnableUseReason;	//不能使用的原因,参考emCouponUnableUseReason
		6 optional int iSaleType;	//优惠类型，参考EMSaleType
	};

	//推广优惠价格信息
	struct STSpreadPriceInfo
	{
		1 require int iPriceType;					//参考emProdPriceType
		2 require unsigned int uiReducePrice; 		//相比实际购买价格优惠金额
		3 require unsigned int uiSpreadPriceSum; 	//推广总价格
	};
	
	struct STProdAttrInfo
	{
		1 optional unsigned int uiHeight = 0;			//单位，mm
		2 optional unsigned int uiLength = 0;
		3 optional unsigned int uiWidth = 0;
		4 optional unsigned int uiWeight = 0;			//单位，g
	};
	
	//退换货策略类型
	enum EMRepolicyType
	{
		E_RETURN_NO_REASON = 0,			//无理由退换货
		E_RETURN_NOT_SUPPORT = 1,		//不支持退换货
		E_RETURN_AFTER_DELIVERY = 2,	//发货前不支持退换货
	};
	
	//预售金额相关信息
	struct STDepositInfo
	{
		1 optional int iDepRatio = 0;		//定金比例， 为0表示非定金
		2 optional int iDepStartTime;		//定金支付开始时间
		3 optional int iDepEndTime;			//定金支付结束时间
		4 optional int iRestStartTime;		//尾款支付开始时间
		5 optional int iRestEndTime;		//尾款支付结束时间
        6 optional int iCrowdStartTime;     //众筹开始时间
        7 optional int iCrowdEndTime;       //众筹结束时间
        8 optional unsigned int uiTargetNum;        //众筹目标件数
	};
		
	enum emPresaleStatus
	{
		E_PRESALE_TYPE_FULL = 0,
		E_PRESALE_TYPE_DEPOSIT = 1,
	};	
		
	//商品SKU信息（商品STProductSkuInfo与订单系统STGOrderInfo的公共信息）
	struct STProductSkuInfo
	{
		1 require string strSKUId;					//SKUID
		2 require string strProductId;				//商品ID
		3 require vector<STPropInfo> vecProps;		//SKU所包含的属性信息
		4 require string strImgUrl;             	//SKU所对应图片
		5 require int iQuantity;                	//可卖库存：实际库存减预扣库存
		6 optional unsigned int uiVCoinPrice;   	//V币价格
		7 optional unsigned int uiCashPrice;        //现金价格，单位：分
		8 optional unsigned int uiPureVCoinPrice; 	//纯V币价格
		9 optional unsigned int uiPureCashPrice;    //纯现金价格，单位：分
		10 optional unsigned int uiOriPrice;       	//原价，单位：分 
		11 optional unsigned int uiBuyLimit; 		//限购数量
		12 optional string strTitle;				//商品标题
		13 optional string strSellerId;				//卖家ID
		14 optional string strSeller;				//卖家名称
		15 optional int iSaleType; 					//0 -- 正常  1 -- 预售
		16 optional int iPreSaleTime;				//预计发货时间
		
		//三期新增字段
		17 optional unsigned int uiRealPrice;		//实际显示价格，可能是特权价格
		18 optional vector<int> vecPrivilegeId;		//计算特权价格的特权
		19 optional vector<STPrivilegeInfo> vecPrivelegeInfo;       //全部折扣信息
		
		20 optional int iSaleStartTime;				//实际开售时间
		
		//五期字段
		21 optional vector<STActDiscountInfo> vecActInfo;	 //活动信息
		
		22 optional unsigned int uiExpectPrice;							//期望价格
		23 optional vector<STPriceTag> vecRealPriceTag;		//最终价格标签
		24 optional vector<STPriceTag> vecExpectPriceTag;	//期望价格标签
		25 optional unsigned int uiSpreadPrice;				//推广价格
		26 optional vector<STPriceTag> vecSpreadPriceTag;	//推广价格标签
		
		27 optional unsigned int uiViewSale;				//外显销量
		
		28 optional int iRealQuantity;						//SKU总库存
		29 optional unsigned int uiSale;					//SKU实际销量
		
		30 optional int iExpTempId;							//运费模板ID
		31 optional unsigned int uiPresaleDiscount = 0;			//预售折扣
		
		32 optional STProdAttrInfo stProdAttr;				//商品的基础属性，长宽高等
		33 optional string strSecCatId;						//二级真实类目ID
		34 optional string strSerialNum;                                        //SKU序列号
		35 optional string strBatchId;						//批次ID
		
		36 optional string strStore;						//仓储ID
		
		37 optional string strOuterId;						//第三方ID
		38 optional STCredictInfo strCredictConf;					//积分配置
		
		39 optional int iStatus;							//SKU 状态
		
		40 optional unsigned int uiGiftCredict;				//赠送积分
		
		41 optional string strJsExtInfo;					//json串，SKU的扩展信息
		
		42 optional unsigned int uiSupPrice;				//SKU供货价，草场地设置
		
		43 optional string strPriCatId;						//一级真实类目ID
		
		44 optional string strProdCus;						//商品定制信息,json串，{"bCustom":false}
		45 optional string strSkuCus;						//SKU定制信息,{"strDesign":"123"}
		
		//46 optional string strRePolicy;						//退换货策略ID
		47 optional int iRePolicyType;						//退换货策略类型, EMRepolicyType
		
		48 optional map<string,string> mapExtInfo;			//SKU扩展信息，map形式，与41字段内容相同
		
		49 optional STDepositInfo stDeposit;				//定金预售信息
		
		50 optional int iPresaleType;						//预售类型

		51 optional STPddGoldsConf strPddGoldsConf;					//片多多配置

	};
	
	//struct stChInfo   SKU渠道扩展信息的结构
	//{
		//1 optional string strChId;		渠道ID
		//2 optional int iType;				渠道类型
		//3 optional int iCostType;			成本结算类型
		//4 optional int iCostPercent;		分成比例
		//5 optional unsigned int uiSupPrice;	渠道供货价
	//};

	//商品价格信息
	struct STPriceInfo
	{
		1 require int iPayType;						//支付类型，参考emPayType
		2 require unsigned int uiCashPrice;         //现金价格，单位：分
		3 require unsigned int uiVCoinPrice;		//V币价格
		4 require unsigned int uiVCoinDiscount;     //其中V币抵扣的金额
		5 optional unsigned int uiOriPrice; 		//原价
		6 optional vector<STPrivilegeInfo> vecDisPrivilege;	 //用于抵扣的特权
		7 optional unsigned int uiPrivilegeDiscount;	//特权抵扣金额
		8 optional unsigned int uiPureCashPrice; 		//纯现金价格，单位：分
		9 optional vector<STActDiscountInfo> vecActInfo;	 //活动信息
		10 optional unsigned int uiPreferentialPrice;			//促销或优惠券优惠金额
		11 optional vector<STPerferential> vecPerferential;	//优惠信息
		12 optional vector<STPriceTag> vecRealPriceTag;		//最终价格标签
		13 optional unsigned int uiPddGoldsPrice;              //新增  金币价格
		14 optional unsigned int uiPddGoldsDiscount;          //新增  金币抵扣金额
	};
	
	//统计价格信息
	struct STPayPriceInfo
	{
		1 require unsigned int uiRealCashSum;               //实际支付现金总额
		2 require unsigned int uiRealVCoinSum;              //实际支付积分总额
		3 require unsigned int uiVCoinDiscountSum;          //积分抵扣金额
		4 require unsigned int uiVIPReduceCashSum;          //VIP特权优惠金额
		5 require unsigned int uiTransPriceSum;             //运费总金额
		6 require unsigned int uiProductCashSum;            //商品累计总金额
		7 optional unsigned int uiReduceCashSum;			//所有优惠的总金额
		8 optional unsigned int uiPreferentialSum;			//促销或优惠券优惠金额
		9 optional vector<STPerferential> vecPerferential;	//优惠信息
		10 optional vector<STSpreadPriceInfo> vecSpreadPriceInfo;	//推广优惠信息(废弃)
		11 optional unsigned int uiProductReduceSum;		//商品优惠金额
		12 optional unsigned short usPayCreditsType;			//积分类型，参考emPayCreditsType
		13 optional unsigned int uiDeposit; 				//订金 
		14 optional unsigned int uiPddRealGoldsSum;				//实际支付金币总额
		15 optional unsigned int uiPddGoldsDiscountSum;				//金币抵扣金额
	};

	//物流单价格信息
	struct STExpressOrderPriceInfo
	{
		1 require string strSellerId;							//商家id
		2 require STPayPriceInfo stSumPriceInfo;				//物流单总价信息     
		3 require map<string, STPriceInfo> mapSku2PriceInfo; 	//各sku价格信息
		4 optional string strNote; 								//留言信息
		5 optional string strStoreId;								//仓储ID
	};

    struct STUndealOrderNumInfo                                          //未读数结构
    {
	    0 optional unsigned int uiUnpayNum;                             //待付款数
	    1 optional unsigned int uiUndeliveryNum;                       //待发货数
	   	2 optional unsigned int uiDeliverNum;                            //待收货数
	    3 optional unsigned int uiUncommentNum;                     //待评价数
	    4 optional unsigned int uiRefundNum;                            //售后订单数
	  	5 optional unsigned int uiArbitrateNum;                          //维权订单数
		6 optional unsigned int uiFreightNum; 							//退运费单数
	};

	
	//==============商品订单公共协议定义===============
	struct STGOrderBase
	{
		1 optional string strGOrderId;              //商品订单ID
		2 optional string strSkuId;                 //SKUID
		3 optional unsigned int uiGoodsNum;     	//购买数量
		4 optional string strCTime;                 //购买时间
		5 optional unsigned int uiVCoinPrice;      	//V币数
		6 optional unsigned int uiPriceSum;         //现金价格，单位：分
		7 optional string strSkuTitle; 				//商品标题
		8 optional string strProductId; 			//商品ID
		9 optional string strExpressOrderId; 		//相关物流订单ID
		10 optional string strBatchId; 				//批次ID
	};

	//单条快递物流信息
	struct STExpressNode
	{
		1 require int iState;				//状态
		2 require string strStateName;		//状态名称
		3 require string strTime;			//物流更新时间
		4 require string strContext;		//物流内容
	};
	
	//==============商品促销公共协议定义===============
	//优惠类型
	enum EMSaleType
	{
		E_DIRECT_DISCOUNT = 1,			//现金直减
		E_THRESHOLD_DISCOUNT = 2,		//满额减
		E_FREE_SHIPPING_DISCOUNT = 3,   //免邮
        E_PERCENT_DISCOUNT = 4,         //折扣
        E_FREE_DISCOUNT = 5,            //免单
	};
	
	//优惠信息
	struct STSaleInfo
	{
		1 optional int iStartTime;					//开始时间
		2 optional int iEndTime;					//结束时间
		3 optional int iSaleType;					//优惠类型
		4 optional unsigned int uiCash;				//可减现金
		5 optional unsigned int uiThreshold;		//门槛
        6 optional int iPercent;                    //折扣百分比
        7 optional int iLimitProductNum;            //优惠券使用条件，为1则订单中仅限一件商品；为0则不限制
	};
	
	
	//筛选条件
	//strKey: "strProductId" 商品ID
	//strCategoryId 二级真实类目ID
	//strPriCatId,	一级真实类目ID
	//strSellerId,	供应商ID
	//strIpId,		二级IP ID
	//strPriIpId,	一级IP ID
	//SKU搜索：strSkuId
    //库存搜索：iUnderstock（3:充足，2不足，1:无库存）
    
	struct STConInfo
	{
		1 optional string strKey;
		2 optional vector<string> vecVal;
		3 optional vector<string> vecExtInfo;		//各val的额外数据，比如二级类目的一级类目ID
	};
	//范围信息结构
	struct STScopeInfoElem
	{
		1 optional int iType = 0;				//类型，0 无商品 1全部商品，2部分商品, 3商品池
		2 optional vector<VideoMall::STConInfo> vecAddCon;		//参与条件
		3 optional vector<VideoMall::STConInfo> vecDelCon;		//剔除条件
	};
	//范围信息
	struct STScopeInfo
	{
		1 optional vector<STScopeInfoElem> vecScope;   
		2 optional vector<string> vecProdId;  //干预的商品列表
		3 optional int iSortType;             //排序类型
	};

	//==============B端提醒触达公众协议===============
	// 提醒类型
	enum emRemindType
	{
		EM_SKU_LACK_REMIND = 1,                    // 库存及缺货提醒,已弃用
		EM_TO_DELIVER_REMIND = 2,                  // 非预约商品待发货订单提醒
		EM_AFTER_SALE_REMIND = 3,                  // 售后提醒(待维权订单提醒)
		EM_ARBIT_REMIND = 4,                       // 仲裁提醒(待仲裁订单提醒)
		EM_VERIFY_REMIND = 5,                      // 审核提醒(商品，活动，优惠券的审核),已弃用
		EM_PROD_VERIFY_REMIND = 6,                 // 商品审核提醒
		EM_ACT_VERIFY_REMIND = 7,                  // 活动审核提醒
		EM_COUP_VERIFY_REMIND = 8,                 // 优惠券审核提醒
		EM_PRESELL_TO_DELIVER_REMIND = 9,          // 预约商品待发货订单提醒
	};

	// 定时任务的消息
	struct STRemindMsgInfo
	{
		1 require string strQqNumber;            // 用户QQ
		2 require string strWxVuid;              // 用户微信对应的vuid
		3 require int iRemindId;                 // 提醒类型
		4 require string strHltQqNumber;         // HeadLoginToken中QQ号
		5 require string strHltQqKey;            // HeadLoginToken中skey
		6 require string strHltVuid;             // HeadLoginToken中vuid
	};
	// 定时任务本地存储(用于删除定时任务)
	struct STRemindTaskInfo
	{
		1 optional string strQqNumber;        // 用户QQ
		2 optional int iRemindId;             // 提醒类型
		3 optional string strAppId;           // 业务ID
		4 require string strMsgId;            // 消息ID
		5 require string strCfgKey;           // 定时ID
	};

	//支付用户信息
	struct STPayUserInfo
	{
		1 require int iUserType; 		//账号类型，参考emPayUserType
		2 require string strUserId;		//账号
	};
    
    
    //==========================商品及活动角标公共协议====================
    enum emScriptType
    {
      E_UPPER_RIGHT_SCRIPT = 1,    //简单角标,文字角标
      E_COVER_SCRIPT = 2,     //图片角标
    };
 
    //角标内容
    struct STScriptContentInfo
    {
      1 optional int iType;   //角标类型,emScriptType
      2 optional string strText;  //角标文案
      3 optional string strPic;  //角标图片
      4 optional int iStyle;  //角标样式，前端负责解释含义
	  5 optional string strComposPic;		//抠图合成图片
	  6 optional string strCovComposPic;	//封面合成图片
    };
 
 
    enum emScriptScene
   {
      E_VMALL = 1,    //商城内
      E_PLAY_BANNER = 2,   //播放底层banner
   };
 
    //角标
    struct STScriptInfo
   {
     1 optional int iScene;      //显示场景，对应emScriptScene
     2 optional bool bShow = false;    //是否显示
     3 optional vector<STScriptContentInfo> vecContent;  //角标
   };

/***********************快递信息************************/
	struct STExpCompanyInfo
	{
		1 require int iCompanyId;			//快递公司ID
		2 require string strCompanyCode;	//快递公司编码
		3 require string strCompanyName;	//快递公司名称
	};
    
};
