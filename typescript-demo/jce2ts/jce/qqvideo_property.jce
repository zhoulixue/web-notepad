module jce
{

	/*
	* 测试L5:317761:2031616[NOSET]
	* 正式L5:402177:65536[NOSET]
	*/

	//我的财产对象
	struct PropertyItemData
	{
		0 require int propertyType;		// 1:钻石   2：金币
		1 require string propertyName; 	//财产名称
		2 require long propertyCount; 	//财产数量
		3 optional string propertyActivity;   //当前活动描述
		4 optional string propertyUrl;				//目前代金券使用
		5 optional long   expiredCount;	//即将过期的财产数量
		6 optional long   expiryTime;   //过期时间 unix格式
	};
	
	//账单列表数据结构
	struct DiamondBillItemData
	{
		0 require string date;           //消费日期
		1 require string consumeDesc;    //消费类型描述
		2 require string consumeDescColor;  //消费描述的颜色  格式：#23eadf
		3 optional string consumeEvent;				//消费事件描述
		4 optional string ctx;						//业务的上下文信息
		5 optional int iReceiverType;				//1:qq  2:wx
		6 optional string strReceiver;				//目标用户的账号
	};

	// 钻石商品数据结构
	struct DiamondConsumeItem
	{
		0 require string iapProductID; //米大师申请物品id(仅供ios端使用)
		1 require int count;           //钻石数量
		2 require string Description;  //购买描述
		3 require float price;		   // 价格
		4 optional string imgUrl;	   //钻石显示的图片
	};
	
	// 兑换金币页数据展现
	struct CoinConsumeItem
	{
		0 require string strActivityId; //运营活动会与相应的activityid对应，activityid对应的配置约定计算规则。activityid由后台下发
		1 require int count;           //金币数量
		2 require string Description;    //购买描述
		3 require int price;    		// 对应的钻石数量
		4 optional string imgUrl;	   //金币显示的图片
	};
	
	// 道具等虚拟物品相关信息
	struct ProductItem
	{
		0 require string strProductId;				//虚拟物品ID，ID由后台下发
		1 require int iProductNum;					//虚拟物品数量
		2 optional  int      iCoinType;    			//代币类型 1钻石 2V币
		3 optional  int      iCoinNum;     			//代币数量 ->即道具询价的结果
	};
	
	//我的财产页活动描述
	struct DiamondActivityRequest
	{
		0 optional string optionalKey;			//站位符
	};
	
	struct DiamondActivityResponse
	{
		0 require int errCode;					//业务错误码
		1 require string activityDesc;  	 	//活动描述
	};

	//我的财产（获取余额）
	struct PropertyMineRequest
	{
		0	require  string   strPf;			 //pf平台来源，前端从midas sdk获取，并填上自定义字段
		1	require  vector<int> vecCoinType;         //1 钻石 2 金币
		2 optional bool bCheckLogin;				//是否根据cookie设置验证登录，默认为true，ios平台设置为false时为强制游客态验证
	};

	struct PropertyMineResponse
	{
		0 require int errCode;								//业务错误码
		1 require vector<PropertyItemData> myProperty;   //我的财产
		2 optional string ts;					//系统时间戳
	};

	//账单流水列表接口（付费流水）
	struct DiamondBillRequest
	{
		0 require string pageContext;	//翻页上下文
		1 optional int iShowType; //0 钻石消费流水 1 金币流水
	};

	struct DiamondBillResponse
	{
		0 require int errCode;								//业务错误码
		1 optional vector<DiamondBillItemData> billList;   	//账单列表
		2 require bool hasNextPage;							//是否有下一页
		3 require string pageContext;						//翻页上下文
	};

	//cmd = 0xe9cf
	struct BillFlowRequest
	{
		0 require int showType;
		1 optional int pageIndex;
		2 optional int pageSize;
	};

	struct BillFlowResponse
	{
		0 require int errCode;								//业务错误码
		1 optional vector<DiamondBillItemData> billList;   	//账单列表
		2 optional int totalCount;
	};
	
	//代币消费请求（金币兑换，首登赠送金币等）
	struct PropertyPayRequest
	{
		0	require  string    		strPf;			  //pf平台来源，midas处非xxx的部分，例如qq_m_qq-2001-android-2011-xxxx传qq_m_qq-2001-android-2011
		1 	require  int       		iSceneType;       //结算场景类型 例如：100001表示腾讯视频 100002腾讯直播 100003tv
		2 	require  int       		iSceneSubType;    //结算场景子类型，场景子类型，1 点播道具 2 直播道具 3 人气榜 7: 离线赠送  10: 用户成长值系统; 11: 成长值扣除; 12: app嵌入H5兑换代金卷
		3	require  string    		strActivityId;    //运营活动会与相应的activityid对应，activityid对应的配置约定计算规则。activityid由后台下发
		4	optional  int      		iProductType;       //虚拟物品种类，1：道具 2：服务 3：积分  5: 成长值支付商品，这个是具体的情况，没有这个字段就填0
		5	optional  vector<ProductItem>      vecProduct;     //虚拟物品列表
		6   optional string strRef;							//来源扩展字段，用于统计，如vid=1133&cid=4455&lid=2444
		7   optional int         	iExcNum;					//任意数量代币兑换时，输入的原兑换代币数量(如钻石换金币 输入钻石数量)
		8   optional long           lSeq;					  //seq 一次购买任务的时间戳,请求重试时保持不变
		9   optional int            iRetryNum;                //本次请求是第几次重试,首次请求该值为0
		
		100 optional int no_flow;										//1:不写flow,由离线赠送来写flow
	};

	struct PropertyPayResponse
	{
		0	require  int  errCode;		 //结果返回码 -10006 钻石不足 ,-10007 金币不足
		1	require string msg;         //支付结果描述
		2	optional string   billno;    //订单号
	};
	
	//钻石兑换页列表接口
	struct DiamondListRequest
	{
		0 require int showType;		//扩展参数，默认填0
	};

	struct DiamondListResponse
	{
		0 require int errCode;
		1 require int totLine;   // 总行数
		2 require vector<DiamondConsumeItem> diamondList; //钻石列表
		3 optional string activityDesc;   //活动描述
	};
	
	//金币兑换页列表接口
	struct CoinListRequest
	{
		0 require int showType;		//扩展参数，默认填0
	};

	struct CoinListResponse
	{
		0 require int errCode;
		1 require int totLine;   // 总行数
		2 require vector<CoinConsumeItem> coinList; //金币列表
	};
	
	//ios财产转移接口，将guid下的财产转移到qq或者微信账户，根据主登录态状态进行转换
	struct TransPropertyRequest
	{
		0 require string tk;
		1 require string ts;
		2 require  vector<int> vecCoinType;         //1 钻石 2 金币
		3 require  string    strPf;			  //pf平台来源，midas处非xxx的部分，例如qq_m_qq-2001-android-2011-xxxx传qq_m_qq-2001-android-2011
		4 require  int       iSceneType;       //结算场景类型 例如：100001表示腾讯视频 100002腾讯直播 100003腾讯TV
		5 require  int       iSceneSubType;    //结算场景子类型，场景子类型，1 点播道具 2 直播道具 3 人气榜 4 guid财产转移
		6 optional string    strVuidTVTransfer;			//用来转移tv手机用户财产	vuid	
	};
	
	struct TransPropertyResponse
	{
		0 require int errCode;
		1 optional string msg;
	};
	
	struct ActPopItemData
	{
		0 optional	string strShowTxt;	//弹框文字
		1 optional	string strLeftTxt;	//左按钮文字
		2 optional	string strRightTxt;	//右按钮文字
		3 optional	string strActivityId;	//支付id
	};
	
	struct ActPopRequest
	{
		0 require	int iSenceId;	//场景id, 1:个人中心的代币余额页，2:好声音投票页
		1 require	long lLastShowTime;	//上次显示兑换框的事件,单位秒
	};
	
	struct ActPopResponse
	{
		0 require int errCode;	//错误码
		1 require bool bShow;	//是否弹框,true展示，false不展示
		2 optional ActPopItemData oPopData;	//弹框相关的信息
		3 optional long lShowTime;	//协议返回的时间
		4 optional string sEffectUrl; //赠送成功后展示的h5效果，为空则不展示。
		5 optional string sSuccessTxt; //分享成功的url。
		6 optional string sFailTxt; //分享失败的url。
	};
};
